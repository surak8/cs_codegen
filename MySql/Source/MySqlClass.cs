//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Reflection;

namespace MySql.Data.MySqlClient {

    public class MySqlClientFactory : DbProviderFactory {
        #region fields
        public static MySqlClientFactory Instance = new MySqlClientFactory();
        #endregion

        public override DbConnection CreateConnection() {
            return new MySqlClientConnection();
        }

        public override DbCommand CreateCommand() {
            return new MySqlClientCommand();
        }
    }

    public class MySqlClientConnection : DbConnection {

        string _connStr;
        string _database;
        string _datasource;
        string _serverVersion;
        //bool _isOpen;
        ConnectionState _connstate;

        public override string ConnectionString {            get {                return _connStr;            }            set {                _connStr = value;            }        }

        public override string Database {            get {                return _database;            }       }

        public override string DataSource {            get {                return _datasource;            }        }

        public override string ServerVersion {            get {                return _serverVersion;            }        }

        public override ConnectionState State {            get {                return _connstate;            }        }

        public override void ChangeDatabase(string databaseName) {
            _database = databaseName;
        }

     public override void Open() {
            ConnectionState prev = _connstate;
            _connstate = ConnectionState.Open;
        }
        public override void Close() {
            ConnectionState prev = _connstate;
            _connstate = ConnectionState.Closed;
        }
  

        protected override DbTransaction BeginDbTransaction(IsolationLevel isolationLevel) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        protected override DbCommand CreateDbCommand() {
            return MySqlClientFactory.Instance.CreateCommand();
        }
    }

    public class MySqlClientParmCollection : DbParameterCollection {
        public override int Count {
            get {
                Logger.log(MethodBase.GetCurrentMethod());
                throw new NotImplementedException();
            }
        }

        public override object SyncRoot {
            get {
                Logger.log(MethodBase.GetCurrentMethod());
                throw new NotImplementedException();
            }
        }

        public override int Add(object value) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override void AddRange(Array values) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override void Clear() {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override bool Contains(string value) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override bool Contains(object value) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override void CopyTo(Array array, int index) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override IEnumerator GetEnumerator() {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override int IndexOf(string parameterName) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override int IndexOf(object value) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override void Insert(int index, object value) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override void Remove(object value) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override void RemoveAt(string parameterName) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override void RemoveAt(int index) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        protected override DbParameter GetParameter(string parameterName) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        protected override DbParameter GetParameter(int index) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        protected override void SetParameter(string parameterName, DbParameter value) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        protected override void SetParameter(int index, DbParameter value) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }
    }

    public class MySqlClientCommand : DbCommand {
        CommandType _cmdType;
        string _cmdText;
        int _cmdTimeout;
        bool _dtimeVisible;
        UpdateRowSource _updateRowSrc;
        DbConnection _connection;
        MySqlClientParmCollection _parms;
        DbTransaction _trans;

        public MySqlClientCommand() {
            _parms = new MySqlClientParmCollection();
        }
        public override string CommandText { get { return _cmdText; } set { _cmdText = value; } }
        public override int CommandTimeout { get { return _cmdTimeout; } set { _cmdTimeout = value; } }
        public override CommandType CommandType { get { return _cmdType; } set { _cmdType = value; } }
        public override bool DesignTimeVisible { get { return _dtimeVisible; } set { _dtimeVisible = value; } }

        public override UpdateRowSource UpdatedRowSource { get { return _updateRowSrc; } set { _updateRowSrc = value; } }

        protected override DbConnection DbConnection { get { return _connection; } set { _connection = value; } }

        protected override DbParameterCollection DbParameterCollection { get { return _parms; } }

        protected override DbTransaction DbTransaction { get { return _trans; } set { _trans = value; } }

        public override void Cancel() {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override int ExecuteNonQuery() {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override object ExecuteScalar() {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override void Prepare() {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        protected override DbParameter CreateDbParameter() {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        protected override DbDataReader ExecuteDbDataReader(CommandBehavior behavior) {
            //Logger.log(MethodBase.GetCurrentMethod());
            //throw new NotImplementedException();
            return new MySqlClientDataReader(behavior);
        }
    }


    public class MySqlClientDataReader : DbDataReader {
          CommandBehavior _readBehavior;

        public MySqlClientDataReader(CommandBehavior behavior) {
            this._readBehavior = behavior;
        }

        public override object this[string name] {
            get {
                Logger.log(MethodBase.GetCurrentMethod());
                throw new NotImplementedException();
            }
        }

        public override object this[int ordinal] {
            get {
                Logger.log(MethodBase.GetCurrentMethod());
                throw new NotImplementedException();
            }
        }

        public override int Depth {
            get {
                Logger.log(MethodBase.GetCurrentMethod());
                throw new NotImplementedException();
            }
        }

        public override int FieldCount {
            get {
                Logger.log(MethodBase.GetCurrentMethod());
                throw new NotImplementedException();
            }
        }

        public override bool HasRows {
            get {
                Logger.log(MethodBase.GetCurrentMethod());
                throw new NotImplementedException();
            }
        }

        public override bool IsClosed {
            get {
                Logger.log(MethodBase.GetCurrentMethod());
                throw new NotImplementedException();
            }
        }

        public override int RecordsAffected {
            get {
                Logger.log(MethodBase.GetCurrentMethod());
                throw new NotImplementedException();
            }
        }

        public override bool GetBoolean(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override byte GetByte(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override long GetBytes(int ordinal, long dataOffset, byte[] buffer, int bufferOffset, int length) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override char GetChar(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override long GetChars(int ordinal, long dataOffset, char[] buffer, int bufferOffset, int length) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override string GetDataTypeName(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override DateTime GetDateTime(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override decimal GetDecimal(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override double GetDouble(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override IEnumerator GetEnumerator() {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override Type GetFieldType(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override float GetFloat(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override Guid GetGuid(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override short GetInt16(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override int GetInt32(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override long GetInt64(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override string GetName(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override int GetOrdinal(string name) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override string GetString(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override object GetValue(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override int GetValues(object[] values) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override bool IsDBNull(int ordinal) {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override bool NextResult() {
            Logger.log(MethodBase.GetCurrentMethod());
            throw new NotImplementedException();
        }

        public override bool Read() {
            Logger.log(MethodBase.GetCurrentMethod());
            return false;
        }
    }

    /// <summary>logging class.</summary>
    public static class Logger {

        #region fields
        /// <summary>controls logging-style.</summary>
        public static bool logDebug = false;

        /// <summary>controls logging-style.</summary>
        public static bool logUnique = false;

        /// <summary>messages written.</summary>
        static readonly List<string> msgs = new List<string>();
        #endregion fields

        #region methods
        #region logging-methods
        /// <summary>log a message</summary>
        /// <param name="msg"/>
        /// <seealso cref="Debug"/>
        /// <seealso cref="Trace"/>
        /// <seealso cref="logDebug"/>
        /// <seealso cref="logUnique"/>
        /// <seealso cref="msgs"/>
        public static void log(string msg) {
            if (logUnique) {
                if (msgs.Contains(msg))
                    return;
                msgs.Add(msg);
            }
            if (logDebug)
#if DEBUG
                Debug.Print("[DEBUG] " + msg);
#endif

#if TRACE
            Trace.WriteLine("[TRACE] " + msg);
#endif
        }

        /// <summary>log a message</summary>
        /// <param name="mb"/>
        /// <seealso cref="makeSig"/>
        /// <seealso cref="log(MethodBase,string)"/>
        public static void log(MethodBase mb) {
            log(mb, string.Empty);
        }

        /// <summary>log a message</summary>
        /// <param name="mb"/>
        /// <param name="msg"/>
        /// <seealso cref="makeSig"/>
        /// <seealso cref="log(MethodBase,string)"/>
        public static void log(MethodBase mb, string msg) {
            log(makeSig(mb) + ":" + msg);
        }

        public static void log(MethodBase mb, Exception ex) {
            log(makeSig(mb) + ":" + ex.Message);
        }
        #endregion logging-methods

        #region misc. methods
        /// <summary>create a method-signature.</summary>
        /// <returns></returns>
        public static string makeSig(MethodBase mb) {
            return mb.ReflectedType.Name + "." + mb.Name;
        }
        #endregion misc. methods
        #endregion methods
    }

}