//
//#define OTHER_TEST
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//
// -d Checkweigh_Data_Dev -o C:\Users\RTCOUSENS\colt\NewProjects\FMSTrackingSuite\FMSTracking\FMSTrackingDAL\Source\generated -n Colt.Database.FMSS -t fmss_build_line  -t fmss_build_trans -t fmss_gather_type -t fmss_upper_sn_data
// C:\Users\RTCOUSENS\colt\NewProjects\FMSTrackingSuite\FMSTracking\FMSTrackingDAL
//
// -Uazuresql@colt-sql.database.windows.net -P"4SQL#DBAdm" -S "colt-sql.database.windows.net" -d blah_blah -o test -t fms_weight_type
//
// -f -d checkweigh_data_dev -o C:\Users\RTCOUSENS\colt\NewProjects\dataset_editor\Source\DAL -n NSDSEdit -t colt_sn_info -t colt_employee

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Text;
using NSMisc;

namespace NSCs_codegen {
    public partial class cs_codegenDriver {
        const string TRACER_NAME = "blah";

        [STAThread()]
        public static void Main(string[] args) {
            CodeGenArgs args2 = CodeGenArgs.parseArgs(args);
            TextWriterTraceListener twtl = null;
            string logFile, dir, appName, errMsg;
            int exitCode = 0;

            //args2.setProvider("System.Data.SqlClient");
            appName = Assembly.GetEntryAssembly().GetName().Name;
#if TRACE
            logFile = Environment.ExpandEnvironmentVariables("%TEMP%" + "\\" + appName + "\\" + appName + ".log");
            if (!Directory.Exists(dir = Path.GetDirectoryName(logFile)))
                Directory.CreateDirectory(dir);

            twtl = new TextWriterTraceListener(logFile, TRACER_NAME);
            Trace.Listeners.Add(twtl);
#endif
            Trace.WriteLine(appName + " starts");

            if (!args2.testmode) {
                if (string.IsNullOrEmpty(args2.database)) {
                    Console.Error.WriteLine("database not specified.  Cannot continue.");
                    args2.showHelp = true;
                }
                if (string.IsNullOrEmpty(args2.outDir)) {
                    Console.Error.WriteLine("output-directory not specified.  Cannot continue.");
                    args2.showHelp = true;
                }
            }
            if (args2.showHelp) {
                args2.showHelpText(Console.Error);
                exitCode = 2;
            } else {
                try {
#if true
                    if (args2.testmode) {
                        //var factory = DbProviderFactories.GetFactory("System.Data.SqlClient");
                        engageTestMode(args2, "NSMyProvider");
                        //engageTestMode(args2, "System.Data.SqlClient");
                    } else {
                        Trace.WriteLine("Generate files in: " + args2.outDir);
                        if (!Directory.Exists(args2.outDir))
                            Directory.CreateDirectory(args2.outDir);
                        extractDataFor(args2);
                    }
#else
                    using (SqlConnection conn = new SqlConnection(connStr)) {
                        conn.InfoMessage += Conn_InfoMessage;
                        conn.Open();
                        Trace.WriteLine(appName + " starts");
                        extractDataFor(args2);
                        Trace.WriteLine(appName + " ends");
                    }
#endif
                } catch (Exception ex) {
                    errMsg = Logger.extractMessage(ex) + Environment.NewLine + ex.StackTrace;
                    //Logger.log(MethodBase.GetCurrentMethod(), ex);
#if TRACE
                    Trace.WriteLine(errMsg);
#endif
                    Console.Error.WriteLine(errMsg);
                    exitCode = 1;
                } finally {

                }
#if TRACE
                Trace.Flush();
                if (twtl != null)
                    Trace.Listeners.Remove(TRACER_NAME);
#endif
                Environment.Exit(exitCode);
            }
        }

        static void engageTestMode(CodeGenArgs args2, string invariantName) {
            DbProviderFactory factory;
            DataTable dt;
            //string invariantName;

            FactoryTester ft;
            try {
                if (!string.IsNullOrEmpty(invariantName)) {
                    //testFactory(DbProviderFactories.GetFactory(invariantName));
                    ft = new FactoryTester(DbProviderFactories.GetFactory(invariantName));
                    ft.doTests();
                } else {
                    dt = DbProviderFactories.GetFactoryClasses();
                    for (int nrow = 0; nrow < dt.Rows.Count; nrow++) {
                        invariantName = dt.Rows[nrow]["InvariantName"].ToString();
                        engageTestMode(null, invariantName);
                        //factory = DbProviderFactories.GetFactory(invariantName);
                        //testFactory(factory);
                    }
                }
            } catch (ConfigurationErrorsException cee) {
                Logger.log(MethodBase.GetCurrentMethod(), cee);
            } catch (ArgumentException ae) {
                Logger.log(MethodBase.GetCurrentMethod(), ae);
            } catch (Exception ex) {
                Logger.log(MethodBase.GetCurrentMethod(), ex);
            }
        }

        // This example assumes a reference to System.Data.Common.
        static DataTable showProviderFactoryClasses() {
            // Retrieve the installed providers and factories.
            DataTable table = DbProviderFactories.GetFactoryClasses();

            // Display each row and column value.
            foreach (DataRow row in table.Rows) {
                foreach (DataColumn column in table.Columns) {
                    var avar = row[column];
                    Logger.logMsg(column.ColumnName + " = " + row[column].ToString());
                }
            }
            return table;
        }

        static void testFactory(DbProviderFactory factory) {
            StringBuilder sb;
            int i = 0;

            sb = new System.Text.StringBuilder();
            try {
                //factory.
                var dbcsb = factory.CreateConnectionStringBuilder();
                sb.Append(factory.GetType().Name + ": Keys = ");
                foreach (string akey in dbcsb.Keys) {
                    if (i > 0)
                        sb.Append(",");
                    sb.Append(akey);
                    //dbcsb.Add(akey, "my_" + akey);
                    i++;
                }
                if (i > 0) {
                    sb.AppendLine();
                    Trace.WriteLine(sb.ToString());
                    Trace.WriteLine("Sample connection-string: " + dbcsb.ConnectionString);
                    //Logger.log(sb.ToString());
                } else
                    Trace.WriteLine("no keys");

                if (factory.GetType().Equals(typeof(System.Data.SqlClient.SqlClientFactory))) {
                    dbcsb.Clear();
                    dbcsb.Add("User ID", "operator");
                    dbcsb.Add("Password", "operator");
                    dbcsb.Add("Application Name", Assembly.GetEntryAssembly().GetName().Name);
                    dbcsb.Add("Workstation ID", Environment.MachineName);
                    dbcsb.Add("Data Source", "colt-sql");
                    dbcsb.Add("Initial Catalog", "checkweigh_data_dev");

                    dbcsb.Add("Persist Security Info", true);
                    dbcsb.Add("Integrated Security", true);
                    Trace.WriteLine("her");
                }
                testConnection(factory, dbcsb.ConnectionString);

                var x1 = factory.CreateCommand();
                //x1.
                var x2 = factory.CreateCommandBuilder();
                var x4 = factory.CreateConnectionStringBuilder();
                var x5 = factory.CreateDataAdapter();
                if (factory.CanCreateDataSourceEnumerator) {
                    var x6 = factory.CreateDataSourceEnumerator();
                    Trace.WriteLine("do-enumerator here");
                }
                var x7 = factory.CreateParameter();
            } catch (Exception ex) {
                // Set the connection to null if it was created.
                //if (connection != null) {
                //    connection = null;
                //}
                Console.WriteLine(ex.Message);
            }
        }

        static void testConnection(DbProviderFactory factory, string connStr) {
            var x3 = factory.CreateConnection();
            //x3.Close();
            x3.ConnectionString = connStr;
            Logger.logMsg("Connection: timeout=" + x3.ConnectionTimeout + ", Database=" + x3.Database + ", DataSource=" + x3.DataSource);
            x3.Disposed += X3_Disposed;
            //x3.BeginTransaction();
            //x3.EnlistTransaction();
            //x3.OpenAsync()
            x3.StateChange += X3_StateChange;
            x3.Open();
            var x30 = x3.GetSchema();
            if (factory.GetType().Equals(typeof(SqlClientFactory)))
                x3.ChangeDatabase("checkweigh_data_dev");
            else
                x3.ChangeDatabase("test");
            var x31 = x3.CreateCommand();
            x3.Close();

            x3.Dispose();
            x3 = null;
        }

        static void X3_StateChange(object sender, StateChangeEventArgs e) {
            Logger.log(MethodBase.GetCurrentMethod(), "Old=" + e.OriginalState + ", New=" + e.CurrentState);
        }

        static void X3_Disposed(object sender, EventArgs e) {
            Logger.log(MethodBase.GetCurrentMethod());
        }

        //static void Conn_InfoMessage(Object sender, System.Data.SqlClient.SqlInfoMessageEventArgs e) {
        //    throw new NotImplementedException();
        //}

        //    }

        static void extractDataFor(CodeGenArgs args2) {
            try {
                extractTablesAsClasses(args2);
            } catch (Exception ex) {
                Logger.log(MethodBase.GetCurrentMethod(), ex);
                //throw new ApplicationException("here-2", ex);
                throw;
            }
        }

        static void blah() {
            DataTable dt = DbProviderFactories.GetFactoryClasses();

            for (int nrow = 0; nrow < dt.Rows.Count; nrow++) {
                for (int ncol = 0; ncol < dt.Columns.Count; ncol++)
                    Debug.Print(dt.Columns[ncol].Caption + " = " + dt.Rows[nrow][ncol].ToString());
                Debug.Print(string.Empty);
            }
        }

        // This example assumes a reference to System.Data.Common.
        static DataTable findProviderFactoryClasses() {
            // Retrieve the installed providers and factories.
            DataTable table = DbProviderFactories.GetFactoryClasses();

            // Display each row and column value.
            foreach (DataRow row in table.Rows) {
                foreach (DataColumn column in table.Columns) {
                    Console.WriteLine(row[column]);
                }
                Console.WriteLine();
            }
            return table;
        }

        static void extractTablesAsClasses(CodeGenArgs args2) {
            string connStr = null, appName = Assembly.GetEntryAssembly().GetName().Name, providerClass;
            DbProviderFactory factory = args2.providerFactory;
            DbConnectionStringBuilder sb = null;
            bool isSqlclient = false;

            providerClass = factory.GetType().FullName;

            if (string.Compare(providerClass, "System.Data.SqlClient.SqlClientFactory", true) == 0) {
                sb = args2.providerFactory.CreateConnectionStringBuilder();
                sb.Add("Application Name", appName);
                sb.Add("Data Source", args2.server);
                sb.Add("Initial Catalog", args2.database);
                if (!string.IsNullOrEmpty(args2.userName) && !string.IsNullOrEmpty(args2.password)) {
                    //sb.use
                    System.Data.SqlClient.SqlConnectionStringBuilder sb2;
                    sb2 = sb as System.Data.SqlClient.SqlConnectionStringBuilder;
                    sb2.UserID = args2.userName;
                    sb2.Password = args2.password;
                } else
                    sb.Add("Integrated Security", true);
                isSqlclient = false;
            } else {
                Debug.Print("user/pass here?");
            }
            if (sb != null) {
                connStr = sb.ConnectionString;
                Trace.WriteLine("ConnectionString is " + connStr);
                try {
                    using (DbConnection conn = factory.CreateConnection()) {
                        conn.ConnectionString = connStr;
                        if (isSqlclient)
                            ((System.Data.SqlClient.SqlConnection) conn).InfoMessage += infoMessageHandler; ;
                        conn.Open();
                        generateCodeFromTables(conn, args2);
                        conn.Close();
                    }
                } catch (Exception ex) {
                    Trace.WriteLine(ex.Message);
                    //throw new ApplicationException("another", ex);
                    throw;
                } finally {

                }
            }

        }

        static void infoMessageHandler(object sender, System.Data.SqlClient.SqlInfoMessageEventArgs e) {
            Logger.log(MethodBase.GetCurrentMethod(), e.Message);
        }

        static void generateCodeFromViews(DbConnection conn, CodeGenArgs args) {
            generateCodeSysObjectType(conn, args, "V");
        }

        static void generateCodeFromTables(DbConnection conn, CodeGenArgs args) {
            string currentTable = null;

            if (args.tables.Count > 0) {
                try {
                    if (conn.State != ConnectionState.Open)
                        conn.Open();
                    foreach (string tableName in args.tables)
                        generateCodeForSingleTable(conn, currentTable = tableName, args);

                    conn.Close();
                } catch (Exception ex) {
                    if (!string.IsNullOrEmpty(currentTable))
                        throw new ApplicationException("Error processing table: " + currentTable, ex);
                    Logger.log(MethodBase.GetCurrentMethod(), ex);

                    //throw new ApplicationException("error", ex);
                    throw;
                }
            } else
                generateCodeSysObjectType(conn, args, "U");
        }

        static void generateCodeSysObjectType(DbConnection conn, CodeGenArgs args, string objType) {
            List<string> names = new List<string>();
            DbDataReader reader;
            DbProviderFactory factory = args.providerFactory;

            try {
                if (conn.State != ConnectionState.Open)
                    conn.Open();
                using (DbCommand cmd = factory.CreateCommand()) {
                    cmd.Connection = conn;
                    cmd.CommandText = "select name from sysobjects where type='" + objType + "' and uid=user_id('DBO') order by name";
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                        names.Add(reader.GetString(0));
                    reader.Close();
                }
                foreach (string aTable in names)
                    generateCodeForSingleTable(conn, aTable, args);
                conn.Close();
            } catch (Exception ex) {
                Logger.log(MethodBase.GetCurrentMethod(), ex);
            }
        }

        static void generateCodeForSingleTable(DbConnection conn, string aTable, CodeGenArgs args) {
            DbDataReader reader;

            using (DbCommand cmd = args.providerFactory.CreateCommand()) {
                cmd.Connection = conn;
                cmd.CommandText = "SELECT * FROM " + aTable + " WHERE 1=0";
                cmd.CommandType = CommandType.Text;
                if (conn.State != ConnectionState.Open)
                    conn.Open();
                generateStuff(makeClassName(aTable), args, reader = cmd.ExecuteReader(), aTable);
                reader.Close();
            }
        }
    }
}