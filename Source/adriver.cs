//
//#define OTHER_TEST
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
//using System.Data.SqlClient;
//using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using NSMisc;

namespace NSCs_codegen {
    public partial class cs_codegenDriver {
        const string TRACER_NAME = "blah";

        [STAThread()]
        public static void Main(string[] args) {
            CodeGenArgs args2 = CodeGenArgs.parseArgs(args);
            TextWriterTraceListener twtl = null;
            string logFile, dir, appName;
            int exitCode = 0;

            args2.setProvider("System.Data.SqlClient");
            //args2.setProvider("NSMyProvider");

            appName = Assembly.GetEntryAssembly().GetName().Name;
#if TRACE
            logFile = Environment.ExpandEnvironmentVariables("%TEMP%" + "\\" + appName + "\\" + appName + ".log");
            if (!Directory.Exists(dir = Path.GetDirectoryName(logFile)))
                Directory.CreateDirectory(dir);

            twtl = new TextWriterTraceListener(logFile, TRACER_NAME);
            Trace.Listeners.Add(twtl);
#endif
            Trace.WriteLine(appName + " starts");

            if (string.IsNullOrEmpty(args2.database)) {
                Console.Error.WriteLine("database not specified.  Cannot continue.");
                args2.showHelp = true;
            }
            if (string.IsNullOrEmpty(args2.outDir)) {
                Console.Error.WriteLine("output-directory not specified.  Cannot continue.");
                args2.showHelp = true;
            }
            if (args2.showHelp) {
                Console.Error.WriteLine("show help here");
                exitCode = 2;
            } else {
                Trace.WriteLine("Generate files in: " + args2.outDir);
                try {
                    if (!Directory.Exists(args2.outDir))
                        Directory.CreateDirectory(args2.outDir);
#if true
#   if TRACE
                    Trace.WriteLine(appName + " starts");
                    Trace.IndentLevel++;
#   endif
                    extractDataFor(args2);
#   if TRACE
                    Trace.IndentLevel--;
                    Trace.WriteLine(appName + " ends");
#   endif
#else
#endif
                } catch (Exception ex) {
                    Logger.log(MethodBase.GetCurrentMethod(), ex);
                } finally {

                }
#if TRACE
                Trace.Flush();
                if (twtl != null)
                    Trace.Listeners.Remove(TRACER_NAME);
#endif
                Environment.Exit(exitCode);
            }
        }

        static void Conn_InfoMessage(Object sender, System.Data.SqlClient.SqlInfoMessageEventArgs e) {
            throw new NotImplementedException();
        }

        //    }

        static void extractDataFor(CodeGenArgs args2) {
            try {
                extractTablesAsClasses(args2);
            } catch (Exception ex) {
                Logger.log(MethodBase.GetCurrentMethod(), ex);
            }
        }

        static void blah() {
            DataTable dt = DbProviderFactories.GetFactoryClasses();

            for (int nrow = 0; nrow < dt.Rows.Count; nrow++) {
                for (int ncol = 0; ncol < dt.Columns.Count; ncol++)
                    Debug.Print(dt.Columns[ncol].Caption + " = " + dt.Rows[nrow][ncol].ToString());
                Debug.Print(string.Empty);
            }
        }

        // This example assumes a reference to System.Data.Common.
        static DataTable findProviderFactoryClasses() {
            // Retrieve the installed providers and factories.
            DataTable table = DbProviderFactories.GetFactoryClasses();

            // Display each row and column value.
            foreach (DataRow row in table.Rows) {
                foreach (DataColumn column in table.Columns) {
                    Console.WriteLine(row[column]);
                }
                Console.WriteLine();
            }
            return table;
        }

        static void extractTablesAsClasses(CodeGenArgs args2) {
            string connStr = null, appName = Assembly.GetEntryAssembly().GetName().Name, providerClass;
            DbProviderFactory factory = args2.providerFactory;
            DbConnectionStringBuilder sb = null;
            bool isSqlclient = false;

            providerClass = factory.GetType().FullName;

            if (string.Compare(providerClass, "System.Data.SqlClient.SqlClientFactory", true) == 0) {
                sb = args2.providerFactory.CreateConnectionStringBuilder();
                sb.Add("Application Name", appName);
                sb.Add("Data Source", args2.server);
                sb.Add("Initial Catalog", args2.database);
                sb.Add("Integrated Security", true);
                isSqlclient = false;
            } else {
                Debug.Print("here");
            }
            if (sb != null) {
                connStr = sb.ConnectionString;
                Trace.WriteLine("ConnectionString is " + connStr);
                try {
                    using (DbConnection conn = factory.CreateConnection()) {
                        conn.ConnectionString = connStr;
                        if (isSqlclient)
                            ((System.Data.SqlClient.SqlConnection) conn).InfoMessage += infoMessageHandler; ;
                        conn.Open();
                        generateCodeFromTables(conn, args2);
                        conn.Close();
                    }
                } catch (Exception ex) {
                    Trace.WriteLine(ex.Message);
                } finally {

                }
            }

        }

        static void infoMessageHandler(object sender, System.Data.SqlClient.SqlInfoMessageEventArgs e) {
            Logger.log(MethodBase.GetCurrentMethod(), e.Message);
        }

        static void generateCodeFromViews(DbConnection conn, CodeGenArgs args) {
            generateCodeSysObjectType(conn, args, "V");
        }

        static void generateCodeFromTables(DbConnection conn, CodeGenArgs args) {
            generateCodeSysObjectType(conn, args, "U");
        }

        static void generateCodeSysObjectType(DbConnection conn, CodeGenArgs args, string objType) {
            List<string> names = new List<string>();
            DbDataReader reader;
            DbProviderFactory factory = args.providerFactory;

            try {
                if (conn.State != ConnectionState.Open)
                    conn.Open();
                using (DbCommand cmd = factory.CreateCommand()) {
                    cmd.Connection = conn;
                    cmd.CommandText = "select name from sysobjects where type='" + objType + "' and uid=user_id('DBO') order by name";
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                        names.Add(reader.GetString(0));
                    reader.Close();
                }
                foreach (string aTable in names)
                    generateCodeForSingleTable(conn, aTable, args);
                conn.Close();
            } catch (Exception ex) {
                Logger.log(MethodBase.GetCurrentMethod(), ex);
            }
        }

        static void generateCodeForSingleTable(DbConnection conn, string aTable, CodeGenArgs args) {
            DbDataReader reader;

            using (DbCommand cmd = args.providerFactory.CreateCommand()) {
                cmd.Connection = conn;
                cmd.CommandText = "SELECT * FROM " + aTable + " WHERE 1=0";
                cmd.CommandType = CommandType.Text;
                if (conn.State != ConnectionState.Open)
                    conn.Open();
                generateStuff(makeClassName(aTable), args, reader = cmd.ExecuteReader(), aTable);
                reader.Close();
            }
        }
    }
}