//#define OTHER_TEST
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using Microsoft.CSharp;

namespace NSCs_codegen {
    public partial class cs_codegenDriver {
        [STAThread()]
        public static void Main(string[] args) {
            int exitCode = 0;
            SqlConnectionStringBuilder sb = new SqlConnectionStringBuilder();
            TextWriterTraceListener twtl = null;
            string connStr, logFile, dir, appName, nameSpace;
            const string TRACER_NAME = "blah";
            CodeDomProvider cdp = new CSharpCodeProvider();
            CodeGeneratorOptions opts = new CodeGeneratorOptions();
            string outDir;

            opts.BlankLinesBetweenMembers = false;
            opts.ElseOnClosing = true;


            appName = Assembly.GetEntryAssembly().GetName().Name;
#if TRACE
            logFile = Environment.ExpandEnvironmentVariables("%TEMP%" + "\\" + appName + "\\" + appName + ".log");
            if (!Directory.Exists(dir = Path.GetDirectoryName(logFile)))
                Directory.CreateDirectory(dir);

            twtl = new TextWriterTraceListener(logFile, TRACER_NAME);
            Trace.Listeners.Add(twtl);
#endif

            Trace.WriteLine(appName + " starts");

            nameSpace = "Colt.Database";
            sb = new SqlConnectionStringBuilder();
            sb.ApplicationName = appName;
            sb.DataSource = "colt-sql";
            sb.InitialCatalog = "checkweigh_data_dev";
            sb.InitialCatalog = "QualityAndEngineering";
#if false
            sb.IntegratedSecurity = false;
            sb.UserID = "operator";
            sb.Password = "operator";
#else
            sb.IntegratedSecurity = true;
#endif
            connStr = sb.ConnectionString;

            Trace.WriteLine("ConnectionString is " + (connStr = sb.ConnectionString));
            outDir = Path.Combine(Directory.GetCurrentDirectory(), "Generated_Files", sb.InitialCatalog);
            try {
                using (SqlConnection conn = new SqlConnection(connStr)) {
                    conn.InfoMessage += Conn_InfoMessage;
                    conn.Open();
#if OTHER_TEST
                    invokeTestProc(conn);
#else

                    //                    generateCodeForSingleTable(conn, "colt_employee", outDir, string.Empty, cdp, opts);
                    //                    generateCodeForSingleTable(conn, "query", outDir, string.Empty, cdp, opts);
                    generateCodeFromTables(conn, outDir, nameSpace, cdp, opts);
                    //                    generateCodeFromViews(conn, outDir, string.Empty, cdp, opts);
                    //                    generateCodeFromTables(conn, "KanbanTemp_CreateKanbanFile", Directory.GetCurrentDirectory(), string.Empty, cdp, opts);
#endif
                    conn.Close();
                }
            } catch (Exception ex) {
                Trace.WriteLine(ex.Message);
            } finally {

            }
            Trace.WriteLine(appName + " ends");
#if TRACE
            Trace.Flush();
            if (twtl != null)
                Trace.Listeners.Remove(TRACER_NAME);
#endif
            Environment.Exit(exitCode);
        }

        static void generateCodeFromViews(SqlConnection conn, string outDir, string nameSpace, CodeDomProvider cdp, CodeGeneratorOptions opts) {
            generateCodeSysObjectType(conn, outDir, nameSpace, cdp, opts, "V");
        }

        static void generateCodeFromTables(SqlConnection conn, string outDir, string nameSpace, CodeDomProvider cdp, CodeGeneratorOptions opts) {
            generateCodeSysObjectType(conn, outDir, nameSpace, cdp, opts, "U");
        }

        static void generateCodeSysObjectType(SqlConnection conn, string outDir, string nameSpace, CodeDomProvider cdp, CodeGeneratorOptions opts, string objType) {
            List<string> names = new List<string>();

            SqlDataReader reader;
            try {
                if (conn.State != ConnectionState.Open)
                    conn.Open();
                using (SqlCommand cmd = new SqlCommand("select name from sysobjects where type='" + objType + "' and uid=user_id('DBO') order by name", conn)) {
                    reader = cmd.ExecuteReader();
                    while (reader.Read())
                        names.Add(reader.GetString(0));
                    reader.Close();
                }
                foreach (string aTable in names)
                    generateCodeForSingleTable(conn, aTable, outDir, nameSpace, cdp, opts);

                conn.Close();
            } catch (Exception ex) {
                Logger.logMethod(MethodBase.GetCurrentMethod(), ex);
            }
        }

        static void generateCodeForSingleTable(SqlConnection conn, string aTable, string outDir, string nameSpace, CodeDomProvider cdp, CodeGeneratorOptions opts) {
            SqlDataReader reader;

            using (SqlCommand cmd = new SqlCommand("SELECT * FROM " + aTable + " WHERE 1=0", conn)) {
                if (conn.State != ConnectionState.Open)
                    conn.Open();
                //                cmd.CommandText = "SELECT * FROM " + aTable + " WHERE 1=0";
                reader = cmd.ExecuteReader();
                generateStuff(makeClassName(aTable), outDir, nameSpace, cdp, opts, reader);
                reader.Close();
            }
        }

        static void Conn_InfoMessage(object sender, SqlInfoMessageEventArgs e) {
            Logger.logMethod(MethodBase.GetCurrentMethod(), e.Message);
        }

        /*
        static void tryToReceiveData(SqlCommand cmd) {
            SqlDataReader reader;
            int nrows = 0;

            reader = cmd.ExecuteReader();
            while (reader.Read())
                nrows++;

            Trace.WriteLine("read " + nrows + " of data!");
        }
        */


#if false
        using System.Data.SqlClient;

namespace NSSnertPop {
    class AllocInfo {
        #region ctor
        public AllocInfo(SqlDataReader reader) {
            string colName;

            for (int i = 0; i < reader.FieldCount; i++) {
                switch (colName = reader.GetName(i)) {
                    case "lower_part_no": /* String */lowerPartNo = reader.GetString(i); break;
                    case "vendor_id": /* Int32 */vendorId = reader.GetInt32(i); break;
                    case "sn_length": /* Int32 */snLength = reader.GetInt32(i); break;
                    case "prefix": /* String */prefix = reader.GetString(i); break;
                    case "suffix": /* String */suffix = reader.IsDBNull(i) ? string.Empty : reader.GetString(i); break;
                    case "pattern_name": /* String */pattern = reader.IsDBNull(i) ? null : reader.GetString(i); break;
                    case "laser_job_no": /* String */laserJobNo = reader.IsDBNull(i) ? null : reader.GetString(i); break;
                    case "laser_flip": /* Boolean */laserFlip = reader.GetBoolean(i); break;
                    case "next_serial_number": /* Int32 */nextNum = reader.GetInt32(i); break;
                    case "weapon_type_id": /* Int32 */weaponTypeId = reader.GetInt32(i); break;
                }
            }
        }
        #endregion

        #region properties
        public int nextNum { get; private set; }
        public string prefix { get; private set; }
        public int snLength { get; private set; }
        public string suffix { get; private set; }
        public string lowerPartNo { get; private set; }
        public int vendorId { get; private set; }
        public string pattern { get; private set; }
        public string laserJobNo { get; private set; }
        public bool laserFlip { get; private set; }
        public int weaponTypeId { get; private set; }

        #endregion

        #region methods
        internal static AllocInfo fromReader(SqlDataReader reader) {
            return new AllocInfo(reader);
        }
        #endregion
    }
}
#endif
    }
}